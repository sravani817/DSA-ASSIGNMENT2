#include <stdio.h>
#include <stdlib.h>

int main() {
    int row1, col1, row2, col2;
    int i, j, k;

    // Input matrix dimensions
    printf("Enter rows and columns for the first matrix: ");
    scanf("%d %d", &row1, &col1);
    printf("Enter rows and columns for the second matrix: ");
    scanf("%d %d", &row2, &col2);

    // Check if matrices can be multiplied
    if (col1 != row2) {
        printf("Matrices cannot be multiplied.\n");
        return 1;
    }

    // Dynamically allocate memory for matrices
    int **mat1 = (int **)malloc(row1 * sizeof(int *));
    int **mat2 = (int **)malloc(row2 * sizeof(int *));
    int **result = (int **)malloc(row1 * sizeof(int *));

    for (i = 0; i < row1; i++)
        mat1[i] = (int *)malloc(col1 * sizeof(int));
    for (i = 0; i < row2; i++)
        mat2[i] = (int *)malloc(col2 * sizeof(int));
    for (i = 0; i < row1; i++)
        result[i] = (int *)malloc(col2 * sizeof(int));

    // Input first matrix
    printf("Enter elements of the first matrix:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col1; j++) {
            printf("mat1[%d][%d]: ", i, j);
            scanf("%d", &mat1[i][j]);
        }
    }

    // Input second matrix
    printf("Enter elements of the second matrix:\n");
    for (i = 0; i < row2; i++) {
        for (j = 0; j < col2; j++) {
            printf("mat2[%d][%d]: ", i, j);
            scanf("%d", &mat2[i][j]);
        }
    }

    // Initialize result matrix to zero
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            result[i][j] = 0;
        }
    }

    // Matrix multiplication
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            for (k = 0; k < col1; k++) {
                result[i][j] += mat1[i][k] * mat2[k][j];
            }
        }
    }

    // Output the result
    printf("Resultant matrix after multiplication:\n");
    for (i = 0; i < row1; i++) {
        for (j = 0; j < col2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }

    // Free allocated memory
    for (i = 0; i < row1; i++)
        free(mat1[i]);
    for (i = 0; i < row2; i++)
        free(mat2[i]);
    for (i = 0; i < row1; i++)
        free(result[i]);

    free(mat1);
    free(mat2);
    free(result);

    return 0;
}
